@page "{id}"
@model todolist.Pages.Goals.ShowModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpCtx
@{
    ViewData["Title"] = @Model.Goal.Name;
    string modalId = "new-todo-for-goal-modal";
    string returnUrl = HttpCtx.HttpContext!.Request.Path
                + HttpCtx.HttpContext.Request.QueryString;
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb mb-1">
        <li class="breadcrumb-item">
            <a asp-page="/Goals/Index">Goals</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            <span class="">@Model.Goal.Name</span>
        </li>
    </ol>
</nav>

<div class="d-flex flex-wrap column-gap-3 row-gap-3 align-items-center justify-content-between mb-4">
    <div class="d-flex gap-3 flex-wrap align-items-center">
        <h1 class="m-0 d-inline fs-2">
            @Model.Goal.Name
        </h1>

        <a class="btn btn-sm btn-outline-secondary" asp-page="/Goals/Edit" asp-route-id="@Model.Goal.Id"
            title="Edit this goal">
            <i class="bi bi-pencil"></i>
        </a>

        <a asp-page="/Goals/ProgressNotes/New" asp-route-goalId="@Model.Goal.Id"
                class="btn btn-sm btn-outline-secondary">
            <i class="bi bi-plus-lg"></i> progress note
        </a>
    
        <button class="btn btn-sm btn-outline-secondary" type="javascript"
            data-bs-toggle="modal"
            data-bs-target="#@modalId">
            <i class="bi bi-plus"></i> todo
        </button>
    </div>

    <div class="d-flex align-items-center">

        <form method="post" asp-page="/Goals/Delete" asp-route-id="@Model.Goal.Id" style="display:inline"> 
            <button class="btn btn-sm btn-outline-danger" type="submit" title="Delete goal"
                onclick="return confirm('Delete this goal?')">
                <i class="bi bi-trash"></i>
            </button>
        </form>
    </div>
</div>

<div class="d-flex flex-wrap-reverse gap-3 mb-4">
    @if(Model.Goal.ProgressNotes.Count > 0)
    {
        <div style="flex: 2 1 0; min-width: 230px;">
            @foreach (ProgressNote note in Model.Goal.ProgressNotes)
            {
                <div class="mb-4">
                <partial name="ProgressNotes/_Card"
                            model="new todolist.Pages.Goals.ProgressNotes.CardModel {
                            GoalId = Model.Goal.Id,
                            Note   = note
                            }" />
                </div>
            }
        </div>
    }

    @if(Model.Goal.Todos.Count > 0)
    {
        <div style="flex: 1 1 0; min-width: 230px;">
            @foreach(Todo todo in @Model.Goal.Todos)
            {
                <div class="mb-4">
                @await Html.PartialAsync("/Pages/Todos/_Card.cshtml", todo)
                </div>
            }
        </div>
    }
</div>

@await Html.PartialAsync(
    "~/Pages/Todos/_NewModal.cshtml",
    (modalId: modalId, returnUrl: returnUrl, Todo: Model.NewTodo)
)
