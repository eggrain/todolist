@model Models.Todo
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpCtx
@{
    string returnUrl = HttpCtx.HttpContext!.Request.Path + HttpCtx.HttpContext.Request.QueryString;
    string editModalId = $"editModal-{@Model.Id}";
    string editFormId = $"edit-form-{Model.Id}";

    string deleteFormId = $"delete-{Model.Id}";
    string completeTodoId = $"complete-{Model.Id}";
    string uncompleteTodoId = $"uncomplete-{Model.Id}";
    string failTodoId = $"fail-{Model.Id}";

    string borderColor = (Model.Completed == true) ? "border-success" : "border-warning";
    string bgColor = (Model.Completed == true) ? "bg-success" : "bg-warning";
}

<div class="card rounded-0 border @borderColor text-start" style="width: 16rem;">
    <div class="card-body @bgColor text-dark">
        <div class="card-text fw-medium">
            @await Html.PartialAsync("/Pages/Todos/_Details.cshtml", Model)
        </div>
    </div>
    <div class="card-footer d-flex flex-wrap gap-1 justify-content-between p-0 align-items-center">
        <div class="d-flex column-gap-1 align-items-center">

            <button form="@deleteFormId" type="submit" class="btn btn-sm btn-outline-danger border-0 rounded-0"
                title="Delete this todo">
                <i class="bi bi-trash"></i>
            </button>
            <form id="@deleteFormId" method="post" asp-page="/Todos/Delete" asp-route-id="@Model.Id" class="d-inline">
                <input value="@returnUrl" type="hidden" name="returnUrl" />
            </form>

            @if (Model.OnDate != null && Model.Completed == false)
            {
                <button form="@failTodoId" class="btn btn-sm btn-outline-danger border-0 rounded-0"
                    title="Fail todo">
                    <i class="bi bi-x-square"></i>
                </button>

                <form id="@failTodoId" method="post" asp-page="/Todos/Edit" asp-route-id="@Model.Id" class="d-inline"
                    asp-page-handler="FailTodo">
                    <input value="@returnUrl" type="hidden" name="returnUrl" />
                </form>
            }


        </div>

        <div class="d-flex column-gap-1 align-items-center">

            @if (Model.Completed)
            {
                <button form="@uncompleteTodoId" class="btn btn-sm btn-outline-danger border-0 rounded-0"
                    title="Mark incomplete">
                    <i class="bi bi-slash-lg"></i>
                </button>

                <form id="@uncompleteTodoId" method="post" asp-page="/Todos/Edit" asp-route-id="@Model.Id" class="d-inline"
                    asp-page-handler="UncompleteTodo">
                    <input value="@returnUrl" type="hidden" name="returnUrl" />
                </form>
            }
            else
            {
                <button form="@completeTodoId" class="btn btn-sm btn-outline-success border-0 rounded-0"
                    title="Mark complete">
                    <i class="bi bi-check-square-fill"></i>
                </button>

                <form id="@completeTodoId" method="post" asp-page="/Todos/Edit" asp-route-id="@Model.Id" class="d-inline"
                    asp-page-handler="CompleteTodo">
                    <input value="@returnUrl" type="hidden" name="returnUrl" />
                </form>
            }

            <a href="#" data-bs-toggle="modal" data-bs-target="#@editModalId"
                class="btn btn-sm btn-outline-secondary border-0 rounded-0" title="Edit this todo">
                <i class="bi bi-pencil"></i>
            </a>

        </div>
    </div>
</div>

@await Html.PartialAsync(
    "~/Pages/Todos/_EditModal.cshtml",
    Model,
    new ViewDataDictionary(ViewData)
    {
        { "ModalId",    editModalId },
        { "EditFormId", editFormId },
        { "ReturnUrl",  returnUrl }
    }
)
